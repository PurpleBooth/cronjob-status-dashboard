name: CI

on:
  schedule:
    - cron: "26 4 * * *"
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout repository
        with:
          fetch-depth: 0
          lfs: true
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm install
        name: Install dependencies
      - name: Pack assets
        run: tar -cf assets.tar .
      - uses: actions/upload-artifact@v3
        name: Save assets
        with:
          name: installed-artifact
          path: assets.tar
          retention-days: 1

  build:
    name: Create production build
    needs:
      - install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        name: Download assets
        with:
          name: installed-artifact
          path: .
      - name: Unpack assets
        run: tar -xf assets.tar .
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm run build
        name: Build site
        env:
          NODE_ENV: production
      - name: Pack built assets
        run: tar -uf assets.tar .

      - uses: actions/upload-artifact@v3
        name: Save built assets
        with:
          name: built-artifact
          path: assets.tar
          retention-days: 1

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - uses: actions/download-artifact@v3
        name: Download assets
        with:
          name: installed-artifact
          path: .
      - run: tar -xf assets.tar
        name: Unpack assets
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm run lint
  style:
    name: Check coding style
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - uses: actions/download-artifact@v3
        name: Download assets
        with:
          name: installed-artifact
          path: .
      - run: tar -xf assets.tar
        name: Unpack assets
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npx prettier -c .
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - uses: actions/download-artifact@v3
        name: Download assets
        with:
          name: installed-artifact
          path: .
      - run: tar -xf assets.tar
        name: Unpack assets
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm run test:ci
  dependabot:
    name: Merge dependabot PR
    needs:
      - test
      - style
      - lint
      - build
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' && ( github.head_ref || github.ref_name ) != 'main' }}
    steps:
      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  docker-push:
    name: Build & push docker image
    if: ${{ ( github.head_ref || github.ref_name ) == 'main' }}
    needs:
      - test
      - style
      - lint
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@b3413d484cc23cf8778c3d2aa361568d4eb54679
        with:
          cosign-release: "v1.9.0"

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - id: lowercase-repo
        name: Fix repo name
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ steps.lowercase-repo.outputs.lowercase }}:buildcache
          cache-to: type=registry,ref=${{ steps.lowercase-repo.outputs.lowercase }}:buildcache,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign ${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }}

  helm-release:
    name: Release changes to the helm chart
    needs:
      - docker-push
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.8.1

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.4.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
